var net = require('net');
var util = require('util');

var code_null = 0;
var code_begin_control = 1;
var code_begin_payload = 2;
var code_terminator = 3
var code_max = 4;
var ch_begin_control = String.fromCharCode(code_begin_control);;
var ch_begin_payload = String.fromCharCode(code_begin_payload);
var ch_end_stanza = String.fromCharCode(code_terminator);
var MODE_NONE = 0;
var MODE_CONTROL = code_begin_control;
var MODE_PAYLOAD = code_begin_payload;

function Server(callback) {
  net.Server.call(this);
  this.addListener('connection', function(socket) {
    socket.setEncoding('utf8');
    socket._mode = MODE_NONE;
    socket.writeStanza = function(stanza, control) {
      console.log('JSS writeJson:%d:%s', control, stanza);
      var str = (control ? ch_begin_control : ch_begin_payload)
        + stanza + ch_end_stanza;
      console.log('JSS writeJson stanza=%s (%d)', str, str.length);
      this.write(str);
    };
    callback(socket);
    
    socket.on('data', function(str) {
      var index = 0;
      while(index >= 0) {
        var ic = _find_first_code(str, index); 
        var code = (ic >= 0) ? str.charCodeAt(ic) : -1;
        if (code == code_begin_control) {
          if (this._mode != MODE_NONE) {
              console.log('WARNING: unexpected end :_mode=%d,code=%d', this._mode, code);
          }
          this._mode = code;
          this._buf = String.fromCharCode(code); // buffer it
        } else if (code == code_begin_payload) {
          if (this._mode != MODE_NONE) {
              console.log('WARNING: unexpected end :_mode=%d,code=%d', this._mode, code);
          }
          this._mode = code;
          this.emit('payload', ch_begin_payload); // don't buffer it
        } else  if (this._mode == MODE_NONE) {
          if (ic >= 0) {
            console.log('WARNING: unexpected code:%d in mode %d', code, this._mode);
          }
        } else if (this._mode == MODE_CONTROL) {
          if (ic >= 0) {
            if (code == code_terminator) {
              this._buf = this._buf.concat(str.substr(index, ic + 1 - index));
              this.emit('control', this._buf);
              this._mode = MODE_NONE;
            } else {
              console.log('WARNING: unexpected code:%d', code);
            }
          } else {
            this._buf = this._buf.concat(str.substr(index)); // buffer it
          }
        } else if (this._mode == MODE_PAYLOAD) {
          if (ic >= 0) {
            if (code == code_terminator) {
              this.emit('payload', str.substr(index, ic + 1 - index));
              this._mode = MODE_NONE;
            } else {
              console.log('WARNING: unexpected code:%d in mode %d', code, this._mode);
            }
          } else {
            this.emit('payload', str.substr(index)); // don't buffer it
          }
        }
        
        index = (ic >= 0 && ic + 1 < str.length) ? ic + 1 : -1;
      } // while
    });
  });
}

// Returns the index to the first 'begin' character
function _find_first_code(str, i) {
  if (i < 0) {
    console.log('ASSERT: negative index %d', i);
    return -1;
  }
  var len = str.length;
  while (i < len) {
    if (str.charCodeAt(i) < code_max) {
      //console.log('FFC cound %d at i', str.charCodeAt(i), i)
      return i;
    }
    i++;
  }
  return -2;
}

util.inherits(Server, net.Server);

exports.createServer = function(requestListener) {
  return new Server(requestListener);
};

exports.code_begin_control = code_begin_control;
exports.code_begin_payload = code_begin_payload;
exports.code_terminator = code_terminator;
